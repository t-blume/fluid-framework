package implementation.vocabularies;


import implementation.eval.EvalUnit;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;

/**
 * Vocabulary class to provide access to the Manchester OWL API representatives for 
 * various entities in the ontology used to generate this code.<p> 
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: ${javaClass}
 *
 * @version generated on Fri Jul 14 09:00:06 CEST 2017 by Blume Till
 */

public class SchemEXVocabulary implements VocabularyConstants {

    public static final EvalUnit.VocabularyTypes type = EvalUnit.VocabularyTypes.schemex;

    private String ls = " .\n";

    //List of Strings which should filter the properties
    //this lists needs to be initialised
    private static String[] filterPropertyList = {"schemex", "west"};


    private String missing = "<http://missing.com>";


    @Override
    public EvalUnit.VocabularyTypes GET_VOCABULARY_TYPE() {
        return type;
    }

    //schema
    @Override
    public String CONST_NO_PROPERTY_OBJECT_CLUSTER() {
        return missing;
    }

    @Override
    public String CONST_COMPLEX_SCHEMA_ELEMENT() {
        return "<http://schemex.west.uni-koblenz.de/EquivalenceClass>";
    }

    @Override
    public String CONST_OBJECT_CLUSTER() {
        return "<http://schemex.west.uni-koblenz.de/TypeCluster>";
    }

    @Override
    public String CONST_PROPERTY_OBJECT_CLUSTER() {
        return CONST_COMPLEX_SCHEMA_ELEMENT();
    }

    @Override
    public String CONST_PROPERTY_CLUSTER() {
        return CONST_COMPLEX_SCHEMA_ELEMENT();
    }


    @Override
    public String CONST_HAS_PAYLOAD_ELEMENT() {
        return "<http://schemex.west.uni-koblenz.de/hasDataset>";
    }



    @Override
    public String CONST_HAS_SUBJECT_EQUIVALENCE() {
        return missing;
    }



    @Override
    public String CONST_IS_SUBJECT_EQUIVALENCE_OF() {
        return "<http://schemex.west.uni-koblenz.de/hasSubset>";
    }


    @Override
    public String CONST_PAYLOAD_INFORMATION() {
        return "<http://rdfs.org/ns/void#uriLookupEndpoint>";
    }

    @Override
    public String CONST_HAS_ATTRIBUTE() {
        return "<http://schemex.west.uni-koblenz.de/hasClass>";
    }

    @Override
    public String CONST_UNRESOLVED_LITERAL_CLUSTER() {
        return "<http://schemex.west.uni-koblenz.de/tcNotResolvable>";
    }

    @Override
    public String CONST_EMPTY_LITERAL_CLUSTER() {
        return "<http://schemex.west.uni-koblenz.de/tcNoTypes>";
    }

    @Override
    public String CONST_EMPTY_PROPERTIES_CLUSTER() {
        return "missing";
    }

    @Override
    public String CONST_RDF_TYPE() {
        return "<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>";
    }

    @Override
    public String CONST_GET_LINK_OBJECT() {
        return missing;
    }




    ///////////////////////////////////////////////////
    /////////////////////USED//////////////////////////
    ///////////////////////////////////////////////////

    //CSE -------------------------------------------------------------

    @Override
    public String RETRIEVE_ALL_COMPLEX_SCHEMA_ELEMENTS() {
        return "?x" + " <" + CONST_RDF_TYPE() + "> <" + CONST_COMPLEX_SCHEMA_ELEMENT() +">";
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_PC(String cseNode, Set<String> s) {
        return null;
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_OC(String cseNode, String s) {
        return null;
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_OC_UNRESOLVED_LITERAL_CLUSTER(String cseNode) {
        return null;
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_OC_EMPTY_LITERAL_CLUSTER(String cseNode) {
        return null;
    }

    @Override
    public String EXTRACT_HASH_VALUE_FROM_CSE(String cse) {
        String result = cse.replace("<", "").replace(">", "");
        result = result.replace("http://schemex.west.uni-koblenz.de/eq", "");
        return result;
    }

    @Override
    public String CREATE_CSE_VIA_HASH(String o) {
        String result = "http://schemex.west.uni-koblenz.de/eq" + o;
        result =  result.replace("<", "").replace(">", "");

        return result;
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_NO_POC(String cseNodeEval) {
        return null;
    }

    @Override
    public String EXTRACT_HASH_VALUE_FROM_POC(String poc) {
        return null;
    }

    @Override
    public String CREATE_POC_VIA_HASH(String s) { return null; }

    @Override
    public String GET_DS_VIA_PC(String pc) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String EXTRACT_HASH_VALUE_FROM_PC(String pc) {
        return null;
    }

    @Override
    public String CREATE_PC_VIA_HASH(String s) {return null; }

    @Override
    public String GET_DS_FROM_EMPTY_PROPERTIES_CLUSTER() {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String GET_DS_VIA_CSE(String cse) {
        String query = "<"+cse+"> " + CONST_HAS_PAYLOAD_ELEMENT() + " ?pay" + ls +
                "?pay " + CONST_PAYLOAD_INFORMATION() + " ?ds.";
        return query;
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_POC(String cseNode, Set<Map<String, String>> s) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_DS(String cseNode) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String ADD_CSE_QUERY_CONSTRAINT_CSE(String cseNode, String s) {
        return "?x <http://blubidy.com> ?y";
    }


    @Override
    public String RETRIEVE_ALL_PRIME_COMPLEX_SCHEMA_ELEMENTS() {
        return "?x" + " " + CONST_RDF_TYPE() + " " + CONST_PROPERTY_CLUSTER();
    }

    @Override
    public String GET_CONSTRAINTS_PC_FROM_CSE(String cseNode) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String GET_CONSTRAINTS_OC_FROM_CSE(String cseNode) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String GET_CONSTRAINTS_POC_FROM_CSE(String cseNode) {
        return "?x <http://blubidy.com> ?y";
    }

    @Override
    public String GET_CONSTRAINTS_CSE_FROM_CSE(String cseNode) {
        return "?x <http://blubidy.com> ?y";
    }


    //PC --------------------------------------------------------------

    @Override
    public String RETRIEVE_ALL_GET_PROPERTY_CLUSTER() {
        return "?x" + " <" + CONST_RDF_TYPE() + ">  <" + CONST_PROPERTY_CLUSTER() +">";
    }

    @Override
    public String GET_CONSTRAINTS_PROPERTIES_FROM_PC(String pc) {
        String query = "<" + pc + "> ?p " + " []"; //CONST_UNRESOLVED_LITERAL_CLUSTER(); //TODO make list for stuff for Till
        return query;
    }

    @Override
    public String GET_DS_FROM_PROPERTIES(Set<String> properties) {
        String queryGold = "";
        for (String s : properties)
            queryGold += " ?eqc <" + s + ">" + " [].\n ";//+CONST_UNRESOLVED_LITERAL_CLUSTER()+" .\n";

        //get connected data sources
        queryGold += "?eqc " + CONST_HAS_PAYLOAD_ELEMENT() + " ?pe .\n";
        queryGold += "?pe " + CONST_PAYLOAD_INFORMATION() + " ?ds .\n";
        queryGold += "\n";

        return queryGold;
    }

    @Override
    public boolean IS_FILTER_PROPERTY(String x) {
        if (Arrays.stream(filterPropertyList).parallel().anyMatch(x::contains))
            return true;
        return false;
    }


    //POC --------------------------------------------------------------
    @Override
    public String GET_DS_FROM_NO_PROPERTY_OBJECT_CLUSTER() {
        String query = "";
        return null;
    }

    @Override
    public String RETRIEVE_ALL_PROPERTY_OBJECT_CLUSTER() {
        String ls = " .\n";
        String query = "?x" + " " + CONST_RDF_TYPE() + " " + CONST_PROPERTY_OBJECT_CLUSTER() + ls;
        //  query += "?x ?prop " + "?tc" + ls + "?tc "+ CONST_HAS_ATTRIBUTE() + "?att"+ls;
        //   query += "FILTER (NOT EXISTS { ?x ?p  "+CONST_EMPTY_LITERAL_CLUSTER()+"} && NOT EXISTS { ?x ?p  "+CONST_UNRESOLVED_LITERAL_CLUSTER()+"})";
        //add Filter param:
        return query;
    }


    @Override
    public String GET_CONSTRAINTS_PROPERTY_OBJECT_PAIRS_FROM_POC(String poc) {
        String ls = " .\n";
        String query = "<" + poc + ">" + " " + CONST_RDF_TYPE() + " " + CONST_PROPERTY_OBJECT_CLUSTER() + ls;
        query += "<" + poc + ">" + " ?prop " + "?obj" + ls; // + ls + "?obj "+ CONST_HAS_ATTRIBUTE() + "?att"+ls;
        // query += "FILTER NOT EXISTS {?obj " +CONST_HAS_ATTRIBUTE() + " <http://schemex.west.uni-koblenz.de/NotResolved>}";
        return query;
    }

    @Override
    public String GET_DS_FROM_PROPERTY_OBJECT_CLUSTER(String poc) {
        return "?x <http://www.blubidi.com> ?y";
    }

    @Override
    public String GET_DS_FROM_PROPERTY_OBJECT_PAIRS(Set<Map<String, String>> objectPropertyPairs) {
        //assumes 1:1 relation

        String ls = " .\n";

        String query = "";

        for (Map<String, String> map : objectPropertyPairs) {
            String prop = map.keySet().stream().findFirst().get();
            String obj = CREATE_OC_VIA_HASH(map.values().stream().findFirst().get());
            query += "?c " + " <" + prop + "> " + "<" + obj + "> " + ls;


        }
        query += "?c " + CONST_HAS_PAYLOAD_ELEMENT() + "?pay" + ls;
        query += "?pay" + CONST_PAYLOAD_INFORMATION() + "?ds" + ls;

        //add Filter param:
        return query;
    }

    //OC --------------------------------------------------------------

    @Override
    public String RETRIEVE_ALL_OBJECT_CLUSTER() {
        return "?x" + " <" + CONST_RDF_TYPE() + "> <" + CONST_OBJECT_CLUSTER() +">";
    }

    @Override
    public String EXTRACT_HASH_VALUE_FROM_OC(String oc) {
        String result = oc.replace("<", "").replace(">", "");
        result = result.replace("http://schemex.west.uni-koblenz.de/tc", "");
        return result;
    }

    @Override
    public String CREATE_OC_VIA_HASH(String s) {
        return "http://schemex.west.uni-koblenz.de/tc" + s;
    }


    @Override
    public String GET_DS_FROM_UNRESOLVED_LITERAL_CLUSTER() {
        String query = "?eqc ?p " + CONST_UNRESOLVED_LITERAL_CLUSTER() + ".\n" +
                "?eqc " + CONST_HAS_PAYLOAD_ELEMENT() + " ?dataset.\n" +
                "?dataset " + CONST_PAYLOAD_INFORMATION() + "?ds";


        return query;
    }

    @Override
    public String GET_DS_FROM_EMPTY_LITERAL_CLUSTER() {
        String query = CONST_EMPTY_LITERAL_CLUSTER() + " " + CONST_IS_SUBJECT_EQUIVALENCE_OF() + " ?eqc.\n" +
                "?eqc" + CONST_HAS_PAYLOAD_ELEMENT() + " ?pay.\n" +
                "?pay " + CONST_PAYLOAD_INFORMATION() + " ?ds.";
        return query;
    }

    @Override
    public String GET_CONSTRAINTS_OC_TYPES_FROM_OC(String tc) {
        return "<" + tc + ">" + CONST_HAS_ATTRIBUTE() + "?type.";
    }

    @Override
    public String GET_DS_FROM_TYPES(Set<String> types) {

        String typeQueryGold = "{\n";
        char var = 'a';
        for (String type : types) {
            typeQueryGold += "?tc " + CONST_HAS_ATTRIBUTE() + " <" + type + "> .\n";

        }
        //tc has to have a connected eqc
        typeQueryGold += "?tc " + CONST_IS_SUBJECT_EQUIVALENCE_OF() + " ?eqc .\n";

        //get connected payload element
        typeQueryGold += "?eqc " + CONST_HAS_PAYLOAD_ELEMENT() + " ?pe .\n";

        //get connected data sources
        typeQueryGold += "?pe " + CONST_PAYLOAD_INFORMATION() + " ?ds .\n";

        typeQueryGold += "}\n";
        return typeQueryGold;
    }

    @Override
    public String GET_DS_VIA_OC(String tc) {
        String queryGold = "{ <" + tc + "> " + CONST_IS_SUBJECT_EQUIVALENCE_OF() + " ?eqc .\n";


        //get connected data sources
        queryGold += "?eqc " + CONST_HAS_PAYLOAD_ELEMENT() + " ?pe .\n";

        queryGold += "?pe " + CONST_PAYLOAD_INFORMATION() + " ?ds .\n";


        queryGold += "}\n";

        return queryGold;
    }




}
